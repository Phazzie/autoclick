name: AUTOCLICK CI/CD

on:
  push:
    branches: [main, develop, "feature/*"]
    tags: ["v*"]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run weekly on Monday at 00:00 UTC
    - cron: "0 0 * * 1"

jobs:
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install bandit safety

      - name: Check for vulnerabilities with safety
        run: |
          safety check -r requirements.txt

      - name: Run SAST with bandit
        run: |
          bandit -r src/ -x tests/

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov

      - name: Check code formatting
        run: |
          python tools/code_formatter.py

      - name: Lint with pylint
        run: |
          pylint src tests --disable=C0111,C0103

      - name: Type check with mypy
        run: |
          mypy src tests --ignore-missing-imports

      - name: Test with pytest
        run: |
          pytest --cov=src --cov-report=xml --cov-report=term tests/

      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: false

      - name: Check minimum code coverage
        run: |
          python -c "import xml.etree.ElementTree as ET; \
          tree = ET.parse('coverage.xml'); \
          root = tree.getroot(); \
          coverage = float(root.attrib['line-rate']) * 100; \
          print(f'Code coverage: {coverage:.2f}%'); \
          exit(0 if coverage >= 80 else 1)"

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install sphinx sphinx_rtd_theme myst-parser

      - name: Generate documentation
        run: |
          mkdir -p docs/source
          sphinx-quickstart -q --project=AUTOCLICK --author="Phazzie" --sep --ext-autodoc --ext-viewcode docs
          sphinx-apidoc -o docs/source src
          cd docs && make html

      - name: Deploy documentation
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html

  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel setuptools

      - name: Build package
        run: |
          python -m build

      - name: Store build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
